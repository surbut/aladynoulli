plot_individuals(data$S,num_individuals = 3)
# Assuming 'Y' is the array of N individuals, D diseases, and T time points from your data generation
data <- generate_tensor_data()
plot_individuals(data$S,num_individuals = 3)
Y_summed <- apply(data$Y, c(1, 2), sum)
# Ensure that the resulting matrix is a count matrix (LDA works with non-negative integers)
# Y_summed should now be a matrix where each row is an individual, and each column is a disease
# Run LDA using the topicmodels package
# Setting the number of topics (K)
K <- 3  # You can adjust the number of topics according to your needs
# Fitting the LDA model
lda_model <- LDA(Y_summed, k = K, method = "Gibbs")
# View the result
summary(lda_model)
topics(lda_model)
str(lda_model)
summary(lda_model$gamma)
plot(lda_model$gamma[1,], type = "h", xlab = "Topic", ylab = "Probability", main = "Topic distribution for individual 1")
lda_model@gamma[1,]
plot(lda_model@gamma[1,], type = "h", xlab = "Topic", ylab = "Probability", main = "Topic distribution for individual 1")
barplot(lda_model@gamma[1,], type = "h", xlab = "Topic", ylab = "Probability", main = "Topic distribution for individual 1")
barplot(colMeans(lda_model@gamma), type = "h", xlab = "Topic", ylab = "Probability", main = "Topic distribution for individual 1")
colMeans(lda_model@gamma)
warnings()
colMeans(lda_model@gamma)
data$theta
dim(data$theta)
head(Y_summed)
Y_summed
source("~/aladynoulli/Rscripts/simulations/newsim.R")
data <- generate_tensor_data()
data <- generate_tensor_data()
plot_individuals(data$S,num_individuals = 3)
Y_summed <- apply(data$Y, c(1, 2), sum)
Y_summed
image(Y_summed)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
source("~/aladynoulli/Rscripts/simulations/newsim.R")
mean(data$Y)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
data <- generate_tensor_data()
mean(data$Y)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
data <- generate_tensor_data()
mean(data$Y)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
data <- generate_tensor_data()
mean(data$Y)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
data <- generate_tensor_data()
mean(data$Y)
Y_summed <- apply(data$Y, c(1, 2), sum)
theta_summed <- apply(data$theta, c(1, 2), mean)
# Ensure that the resulting matrix is a count matrix (LDA works with non-negative integers)
# Y_summed should now be a matrix where each row is an individual, and each column is a disease
theta_summed
matplot(theta_summed[c(1:10),])
image(theta_summed)
data <- generate_tensor_data(N = 100, D = 10, T = 5, K = 3, seed = 123)
data <- generate_tensor_data(N = 100, D = 10, T = 5, K = 3,num_covariates = 2)
plot_individuals(data$S,num_individuals = 3)
# Summing across the time dimension (3rd dimension)
# Collapse Y along the time dimension to get a matrix of individuals x diseases
Y_summed <- apply(data$Y, c(1, 2), sum)
data <- generate_tensor_data(N = 100, D = 5, T = 10, K = 3,num_covariates = 2)
plot_individuals(data$S,num_individuals = 3)
data <- generate_tensor_data(N = 100, D = 5, T = 10, K = 3,num_covariates = 2)
plot_individuals(data$S,num_individuals = 3)
Y_summed <- apply(data$Y, c(1, 2), sum)
theta_summed <- apply(data$theta, c(1, 2), mean)
Y_summed
sum(Y_summed==1)
sum(Y_summed==0)
source("~/aladynoulli/Rscripts/simulations/newsim.R")
Y_summed <- apply(data$Y, c(1, 2), sum)
theta_summed <- apply(data$theta, c(1, 2), mean)
data <- generate_tensor_data(N = 100, D = 5, T = 10, K = 3,num_covariates = 2)
plot_individuals(data$S,num_individuals = 3)
# Summing across the time dimension (3rd dimension)
# Collapse Y along the time dimension to get a matrix of individuals x diseases
Y_summed <- apply(data$Y, c(1, 2), sum)
theta_summed <- apply(data$theta, c(1, 2), mean)
image(Y_summed)
image(t(Y_summed), xlab = "Disease", ylab = "Individual", main = "Summed data")
image((Y_summed), ylab = "Disease", xlab = "Individual", main = "Summed data")
theta_summed <- apply(data$theta, c(1, 2), mean)
image((theta_summed), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
K <- 3  # You can adjust the number of topics according to your needs
# Fitting the LDA model
lda_model <- LDA(Y_summed, k = K, method = "Gibbs")
sum(rowSums(Y_summed)==0)
which(rowSums(Y_summed) == 0)
Y_summed <- apply(data$Y, c(1, 2), sum)
nullfolks=which(rowSums(Y_summed) == 0)
Y_summed=Y_summed[-nullfolks,]# Check for any individuals with no diseases
image((Y_summed), ylab = "Disease", xlab = "Individual", main = "Summed data")
image((theta_summed[-nullfolks,]), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
K <- 3  # You can adjust the number of topics according to your needs
# Fitting the LDA model
lda_model <- LDA(Y_summed, k = K, method = "Gibbs")
image(lda_model@gamma)
lda_model@gamma
theta_summed
image(lda_model@beta, xlab = "Topic", ylab = "Disease", main = "Topic distribution for disease 1")
dim(data$phi_kd)
eta_summed <- apply(data$eta, c(1, 2), mean)
image((data$eta), ylab = "eta (topic_specific disease loading)", xlab = "Topic", main = "Summed data"
eta_summed <- apply(data$eta, c(1, 2), mean)
image((theta_summed[-nullfolks,]), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
image((data$eta), ylab = "eta (topic_specific disease loading)", xlab = "Topic", main = "Summed data"
image((data$eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic", main = "Summed data"
eta_summed <- apply(data$eta, c(1, 2), mean)
image((theta_summed[-nullfolks,]), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
image((data$eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic", main = "Summed data"
eta_summed <- apply(data$eta, c(1, 2), mean)
image((theta_summed[-nullfolks,]), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
image((data$eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic",
main = "Summed data")
eta_summed <- apply(data$eta, c(1, 2), mean)
dim(data$eta)
dim(eta_summed)
image((data$eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic",
main = "Summed data")
image((eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic",
main = "Summed data")
eta_summed
image(lda_model@beta, xlab = "Topic", ylab = "Disease", main = "Topic distribution for disease 1")
lda_model@beta
?lda_model
sum(plogis(lda_model@beta))
?`topics,TopicModel-method`
?`TopicModel-class`
sum(exp(lda_model@beta[1,]))
image(exp(lda_model@beta), xlab = "Topic", ylab = "Disease", main = "Topic distribution for disease 1")
library(topicmodels)
# Assuming 'Y' is the array of N individuals, D diseases, and T time points from your data generation
data <- generate_tensor_data(N = 100, D = 5, T = 10, K = 3,num_covariates = 2)
plot_individuals(data$S,num_individuals = 3)
image(lda_model@gamma, xlab = "Topic", ylab = "Individual", main = "Topic distribution for individuals")
image(exp(lda_model@beta), xlab = "Topic", ylab = "Disease", main = "Topic distribution for diseases ")
# View the result
image(lda_model@gamma, ylab = "Topic", xlab = "Individual", main = "Topic distribution for individuals")
image(exp(lda_model@beta), xlab = "Topic", ylab = "Disease", main = "Topic distribution for diseases ")
# View the result
image(lda_model@gamma, ylab = "Topic", xlab = "Individual", main = "Topic distribution for individuals")
image(exp(lda_model@beta), xlab = "Topic", ylab = "Disease", main = "Topic distribution for diseases ")
heatmap(lda_model@gamma, ylab = "Topic", xlab = "Individual", main = "Topic distribution for individuals")
# Assuming lda_model@beta is a matrix of disease probabilities per topic
beta_exp <- exp(lda_model@beta)  # If you're using exp to scale the values
beta_df <- as.data.frame(beta_exp)
beta_df$Topic <- factor(rownames(beta_df))  # Adding Topic as a factor for x-axis
# Convert to long format for ggplot
beta_long <- reshape2::melt(beta_df, id.vars = "Topic")
# Plot with ggplot2
ggplot(beta_long, aes(x = Topic, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +  # Adjust the color gradient
labs(x = "Topic", y = "Disease", title = "Topic distribution for diseases") +
theme_minimal()
# View the result
# Assuming lda_model@gamma is a matrix of topic proportions
library(ggplot2)
gamma_df <- as.data.frame(lda_model@gamma)
gamma_df$Topic <- factor(rownames(gamma_df))  # Adding Topic as a factor for y-axis
# Convert to long format for ggplot
gamma_long <- reshape2::melt(gamma_df, id.vars = "Topic")
# Plot with ggplot2
ggplot(gamma_long, aes(x = variable, y = Topic, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Adjust the color gradient
labs(x = "Individual", y = "Topic", title = "Topic distribution for individuals") +
theme_minimal()
# Assuming lda_model@gamma is a matrix of topic proportions
library(ggplot2)
gamma_df <- as.data.frame(lda_model@gamma)
gamma_df$Topic <- factor(rownames(gamma_df))  # Adding Topic as a factor for y-axis
# Convert to long format for ggplot
gamma_long <- reshape2::melt(gamma_df, id.vars = "Topic")
# Plot with ggplot2
ggplot(gamma_long, aes(x = variable, y = Topic, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Adjust the color gradient
labs(y = "Individual", x = "Topic", title = "Topic distribution for individuals") +
theme_minimal()
# Assuming lda_model@beta is a matrix of disease probabilities per topic
beta_exp <- exp(lda_model@beta)  # If you're using exp to scale the values
beta_df <- as.data.frame(beta_exp)
beta_df$Topic <- factor(rownames(beta_df))  # Adding Topic as a factor for x-axis
# Convert to long format for ggplot
beta_long <- reshape2::melt(beta_df, id.vars = "Topic")
# Plot with ggplot2
ggplot(beta_long, aes(x = Topic, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +  # Adjust the color gradient
labs(x = "Topic", y = "Disease", title = "Topic distribution for diseases") +
theme_minimal()
# Assuming Y_summed is a matrix of diseases vs individuals
Y_df <- as.data.frame(Y_summed)
Y_df$Disease <- factor(rownames(Y_df))  # Adding Disease as a factor for y-axis
# Convert to long format for ggplot
Y_long <- reshape2::melt(Y_df, id.vars = "Disease")
# Plot with ggplot2
ggplot(Y_long, aes(x = variable, y = Disease, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "green") +  # Adjust the color gradient
labs(x = "Individual", y = "Disease", title = "Summed data for Diseases") +
theme_minimal()
image((Y_summed), ylab = "Disease", xlab = "Individual", main = "Summed data")
image((theta_summed[-nullfolks,]), ylab = "Theta (topic)", xlab = "Individual", main = "Summed data")
image((eta_summed), ylab = "eta (topic_specific disease loading)", xlab = "Topic",
main = "Summed data")
# Assuming Y_summed is a matrix of diseases vs individuals
Y_df <- as.data.frame(Y_summed)
Y_df$Disease <- factor(rownames(Y_df))  # Adding Disease as a factor for y-axis
# Convert to long format for ggplot
Y_long <- reshape2::melt(Y_df, id.vars = "Disease")
# Plot with ggplot2
ggplot(Y_long, aes(x = variable, y = Disease, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "green") +  # Adjust the color gradient
labs(x = "Individual", y = "Disease", title = "Summed data for Diseases") +
theme_minimal()
Y_df <- as.data.frame(Y_summed)
Y_df$Disease <- factor(rownames(Y_df))  # Adding Disease as a factor for y-axis
# Convert to long format for ggplot
Y_long <- reshape2::melt(Y_df, id.vars = "Disease")
# Plot with ggplot2
ggplot(Y_long, aes(x = variable, y = Disease, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Adjust the color gradient
labs(x = "Individual", y = "Disease", title = "Summed data for Diseases") +
theme_minimal()
# Assuming eta_summed is a matrix of topics and diseases
eta_df <- as.data.frame(eta_summed)
eta_df$Topic <- factor(rownames(eta_df))  # Adding Topic as a factor for x-axis
# Convert to long format for ggplot
eta_long <- reshape2::melt(eta_df, id.vars = "Topic")
# Plot with ggplot2
ggplot(eta_long, aes(x = Topic, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "orange") +  # Adjust the color gradient
labs(x = "Topic", y = "eta (Topic-specific disease loading)", title = "Summed eta data") +
theme_minimal()
theta_df <- as.data.frame(theta_summed[-nullfolks,])
theta_df$Theta <- factor(rownames(theta_df))  # Adding Theta (topics) as a factor for y-axis
# Convert to long format for ggplot
theta_long <- reshape2::melt(theta_df, id.vars = "Theta")
# Plot with ggplot2
ggplot(theta_long, aes(x = variable, y = Theta, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "purple") +  # Adjust the color gradient
labs(x = "Individual", y = "Theta (Topic)", title = "Summed Theta data") +
theme_minimal()
theta_df <- as.data.frame(theta_summed[-nullfolks,])
theta_df$Theta <- factor(rownames(theta_df))  # Adding Theta (topics) as a factor for y-axis
# Convert to long format for ggplot
theta_long <- reshape2::melt(theta_df, id.vars = "Theta")
# Plot with ggplot2
ggplot(theta_long, aes(x = variable, y = Theta, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "purple") +  # Adjust the color gradient
labs(y = "Individual", x = "Theta (Topic)", title = "Summed Theta data") +
theme_minimal()
source("~/aladynoulli/R/aladynoulli.R")
generate_tensor_data
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
dim(Y)
dim(G)
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
library("aladynoulli")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 5000,initial_values = initial_values)
a=aladynoulli(Y, G, n_topics = 3,n_iters = 5000,initial_values = initial_values)
clear()
a=aladynoulli(Y, G, n_topics = 3,n_iters = 5000,initial_values = initial_values,length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
aladynoulli
incidence=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
incidence=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
event=array(dim(d)[1],dim = dim(d)[2]);
d=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
T=dim(incidence)[3]
ages=30:80
event=array(dim(d)[1],dim = dim(d)[2]);
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=80)
}
}
dim(event)
d
dim(event)
event=array(T,dim = c(dim(d)[1],dim(d)[2]))
dim(event)
T
event=array(T,dim = c(dim(d)[1],dim(d)[2]))
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=ages[T])
}
}
head(event)
event[1,]
y[1,1,]
d[1,1,]
prs=readRDS("~/Dropbox (Personal)/pheno_dir/prs_subset.rds")
dim(prs)
d=d[d$eid %in% prs$eid,]
head(d)
d=d[rownames(d) %in% prs$eid,]
rownames(d)
dimnames(d)[1]
intersect(as.character(dimnames(d)[1]),prs$Identifier)
intersect(dimnames(d)[1],prs$Identifier)
head(dimnames(d)[1])
head(dimnames(d)[1][1:10])
d[1:10,1,1]
dimnames(d)[1][[1:10]]
dimnames(d)[1][[1]]
dimnames(d)[1][[1]][1:10]
head(prs$Identifier)
# Filter the disease array to include only individuals in prs
d <- d[rownames(d) %in% prs$Identifier, , ]
# Ensure prs is in the same order as d
prs <- prs[match(rownames(d), prs$Identifier), ]
d=d[rownames(d) %in% prs$eid,]
head(d)
head(prs)
all.equal(rownames(d),prs$Identifier)
head(prs$Identifier)
dim(prs)
dim(d)
all.equal(rownames(d),as.character(prs$Identifier))
d=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
prs=readRDS("~/Dropbox (Personal)/pheno_dir/prs_subset.rds")
prs$Identifier <- as.character(prs$Identifier)
# Filter the disease array to include only individuals in prs
d <- d[rownames(d) %in% prs$Identifier, , ]
# Ensure prs is in the same order as d
prs <- prs[match(rownames(d), prs$Identifier), ]
all.equal(rownames(d),as.character(prs$Identifier))
saveRDS(event,"~/tensornoulli_ehr/data/event.rds")
saveRDS(event,"~/tensornoulli_ehr/data/event.rds")
saveRDS(d,"~/tensornoulli_ehr/data/Y.rds")
saveRDS(prs,"~/tensornoulli_ehr/data/prs.rds")
dim(d)
dim(prs)
dim(event)
event = array(T, dim = c(dim(d)[1], dim(d)[2]))
dim(event)
event = array(T, dim = c(dim(d)[1], dim(d)[2]))
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
event[i, disease] = ages[d[i, disease, ] == 1] - 1
}
else
(event[i, disease] = ages[T])
}
}
saveRDS(event,"~/tensornoulli_ehr/data/event.rds")
event = array(T, dim = c(dim(d)[1], dim(d)[2]))
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
event_indices[i, disease] = which[d[i, disease, ] == 1] - 1
}
else
(event[i, disease] = ages[T])
}
}
which[d[i, disease, ]
==1)
i, disease, ] == 1) - 1
which(d[i, disease, ] == 1)
which(d[i, disease, ] == 1) - 1
event_indices[i, disease] = which(d[i, disease, ] == 1) - 1
event_indices = array(T, dim = c(dim(d)[1], dim(d)[2]))
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
event_indices[i, disease] = which(d[i, disease, ] == 1) - 1
}
else
(event[i, disease] = ages[T])
}
}
event_indices[i,d]
event_indices[i,disease]
i
disease=
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
event_indices[i, disease] = which(d[i, disease, ] == 1) - 1
}
else
(event[i, disease] = ages[T])
}
}
head(event_indices)
T
head(d)
which(d[i,disease]==1)
d
disease
1:dim(d)[2]
disease in 1:dim(d)[2]
disease=1
which(d[i, disease, ] == 1)
which(d[i, disease, ] == 1)[1]
i
disease
i=1
which(d[i, disease, ] == 1)[1]
d=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
prs=readRDS("~/Dropbox (Personal)/pheno_dir/prs_subset.rds")
prs$Identifier <- as.character(prs$Identifier)
# Filter the disease array to include only individuals in prs
d <- d[rownames(d) %in% prs$Identifier, , ]
# Ensure prs is in the same order as d
prs <- prs[match(rownames(d), prs$Identifier), ]
all.equal(rownames(d),as.character(prs$Identifier))
ages=30:80
T=dim(d)[3]
event_indices = array(0, dim = c(dim(d)[1], dim(d)[2]))
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
# Find the index when the event occurred
event_indices[i, disease] = which(d[i, disease, ] == 1)[1] - 1  # Subtract 1 for 0-based indexing
}
else {
# For censored events, use the last index
event_indices[i, disease] = dim(d)[3] - 1  # Subtract 1 for 0-based indexing
}
}
}
head(event_indices)
head(d[1,,])
head(event_indices[1,])
which(d[1,2,]==1)
saveRDS(event_indices,"~/tensornoulli_ehr/data/event.rds")
saveRDS(d,"~/tensornoulli_ehr/data/Y.rds")
saveRDS(prs,"~/tensornoulli_ehr/data/prs.rds")
event_indices = array(0, dim = c(dim(d)[1], dim(d)[2]))
for (i in 1:dim(d)[1]) {
for (disease in 1:dim(d)[2]) {
if (sum(d[i, disease, ]) != 0) {
# Find the index when the event occurred
event_indices[i, disease] = which(d[i, disease, ] == 1)[1] - 1  # Subtract 1 for 0-based indexing
}
else {
# For censored events, use the last index
event_indices[i, disease] = dim(d)[3]  # keep at T
}
}
}
saveRDS(event_indices,"~/tensornoulli_ehr/data/event.rds")
head(event_indices)
dim(G)
dim(prs)
head(Y)
head(d)
dim(d)
apply(d,c(2,3),mean)
dm=apply(d,c(2,3),mean)
matplot(dm)
matplot(t(dm))
par(mfrow=c(1,1))
dev.new()
par(mfrow=c(1,1))
matplot(t(dm))
matplot(t(dm))
matplot(t(dm))
head(dm)
matplot(t(dm[1:10,]))
matplot(t(dm),type = "l")
matplot(t(dm),type = "l")
dev.new()
matplot(t(dm),type = "l")
matplot(t(dm),type = "l",y="Incidence",x="Time")
matplot(t(dm),type = "l",ylab="Incidence",xlab="Time")
dim(dm)
qr(dm)
qr(dm)$rank
qr(dm[1:100,])$rank
setwd("~/aladynoulli/analysis")
setwd("~/aladynoulli")
shiny::runApp('clear')
runApp('clear')
runApp('clear')
