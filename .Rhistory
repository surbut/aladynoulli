o=generate_survival_data(theta, N, D, T, censoring_rate)
#plot_individuals(data$E)
return(list(Y = o$Y, E = o$E,E_python=o$E_python, G = G, U2 = U2, U3 = U3, W = W, B = B, C = o$C,Phi=phi, Lambda=lambda_k,
Theta=theta, Pi=o$Pi,baseline_risk=baseline_risk))
}
generate_tensor_data <- function(N = 1000, D = 5, T = 10, K = 3, R = 5, P = 20,censoring_rate = 0.05) {
# Create time basis functions (U2, U3)
time <- seq(0, 1, length.out = T)
basis <- bs(time, df = R, intercept = FALSE)
U2 <- U3 <- basis
#U2 <- U3 <- qr.Q(qr(basis))
matplot((U2),type="l")
# time <- seq(0, 1, length.out = T)
# K <- exp(-as.matrix(dist(time))^2 / (2*l^2))
# basis <- t(mvrnorm(R, rep(0, T), K))
# basis <- qr.Q(qr(basis))  # Orthogonalize
#
# U2 <- U3 <- basis
# Create disease weights (W) with later onset ages
W <- array(0, dim = c(D, K, R))
for (d in 1:D) {
for (k in 1:K) {
onset_age <- sample((R/2):R, 1)  # Sample from latter half of basis functions
W[d, k, ] <- dnorm(1:R, mean = onset_age, sd = R/4)
W[d, k, ] <- W[d, k, ] / max(W[d, k, ])  # Normalize
}
}
# Generate genetic data
G <- matrix(rbinom(N * P, 2, 0.3), nrow = N, ncol = P)
# Create genetic effects (B)
B <- array(rnorm(P * K * R, mean = 0, sd = 0.03), dim = c(P, K, R))
# Create individual-specific effects (C)
C <- array(rnorm(N * K * R, mean = 0, sd = 0.05), dim = c(N, K, R))
# Compute U1G
U1G <- einsum('np,pkr->nkr', G, B) + C
# Compute theta
lambda_k <- einsum('nkr,tr->nkt', U1G, U2)
phi <- einsum('dkr,tr->dkt', W, U3)
theta <- einsum('nkt,dkt->ndt', lambda_k, phi)
for(d in 1:D){
theta[,d,] <- theta[,d,] + baseline_risk
}
# Generate survival data
o=generate_survival_data(theta, N, D, T, censoring_rate)
#plot_individuals(data$E)
return(list(Y = o$Y, E = o$E,E_python=o$E_python, G = G, U2 = U2, U3 = U3, W = W, B = B, C = o$C,Phi=phi, Lambda=lambda_k,
Theta=theta, Pi=o$Pi,baseline_risk=baseline_risk))
}
# Plot individuals
plot_individuals <- function(E, num_individuals = 3) {
par(mfrow = c(num_individuals, 1), mar = c(4, 4, 2, 1))
for (i in 1:num_individuals) {
individual <- sample(1:dim(E)[1], 1)
event_matrix <- matrix(0, nrow = dim(E)[2], ncol = max(E))
for (d in 1:dim(E)[2]) {
event_time <- E[individual, d]
if (event_time < max(E)) {
event_matrix[d, event_time] <- 1
}
}
image(1:max(E), 1:dim(E)[2], t(event_matrix), xlab = "Time", ylab = "Disease",
main = paste("Individual", individual),
col = c("white", "red"))
}
}
# Generate data
set.seed(123)
data <- generate_tensor_data()
matplot(data$U2,type="l",ylab="Disease Basis")
matplot(data$U3,type="l",ylab="Individual Basis")
nind=sample(1:dim(data$Y)[1],1)
matplot(t(data$Lambda[nind,,]),ylab = "Individual Loading",xlab="time",type = "l")
ndisease=sample(1:dim(data$Y)[2],1)
matplot(t(data$Phi[ndisease,,]),ylab = "Disease Loading",xlab="time",type = "l")
matplot(data$Theta[nind,ndisease,],type="l",ylab="Case Rate",xlab="time")
f=apply(data$Y,c(2,3),mean)
matplot(t(f),type="l",ylab="Case Rate",xlab="time")
f=apply(data$Pi,c(2,3),mean)
matplot(t(f),type="l",ylab="Pi",xlab="time")
library(MSGene)
library(data.table)
library(reshape2)
lpa=fread("~/Dropbox (Personal)/UKBBLPAregressionready")
lpa$scaled_lpa=scale(lpa$Lipoprotein_a) ## note it is not normally distributed
library(ggplot2)
library(ggridges)
detach("package:plyr", unload = TRUE)
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa")],by.y = "sample_id",by.x="identifier")
train$cad.prs=train$scaled_lpa
ages = c(40:80)
nstates = c(
"Health",
"Ht",
"HyperLip",
"Dm",
"Cad",
"death",
"Ht&HyperLip",
"HyperLip&Dm",
"Ht&Dm",
"Ht&HyperLip&Dm"
)
ages=40:80
modelfit=fitfunc2(data.table(train),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
coefs=b$custom_smooth
prs_quants=c(-2:2)
sex=c(0,1)
atrisk=expand.grid(intercept=1,prs_quants=prs_quants,sex=sex,smoke=c(0,1),ah=c(0,1),stat=c(0,1))
ar=atrisk[atrisk$ah==0&atrisk$smoke==0&atrisk$stat==0,]
agesint=seq(40,70,by=5)
tenlifarray=array(NA,dim=c(length(agesint),nrow(ar),4))
dimnames(tenlifarray)=list(agesint,levels(interaction(prs_quants,sex)),c("Ten","Lifetime","TenBenefit","LifetimeBenefit"))
for(g in 1:length(agesint)){
age=agesint[g]
tenlifarray[g,,1]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,2]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,3]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$Hazard_treated
tenlifarray[g,,4]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$Hazard_treated
}
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
ben2=melt(tenlifarray[,c(6:10),"LifetimeBenefit"])
ten=melt(tenlifarray[,c(6:10),"Ten"])
l=melt(tenlifarray[,c(6:10),"Lifetime"])
mer=merge(ten,l,by=c("Var1","Var2"))
mer=merge(mer,ben,by=c("Var1","Var2"))
# colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
# mer$`PRS Category`=factor(mer$`PRS Category`,labels = c(0.01,seq(0.1,0.9,by=0.1),0.99))
# mermelt=melt(mer,id.vars=c("Age","PRS Category"))
colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
mer$`PRS Category`=factor(mer$`PRS Category`,labels = -2:2)
mermelt=melt(mer,id.vars=c("Age","PRS Category"))
# tenlifarray[,c("2.1","-2.1"),"Ten"]
#
# netben[,c("2.1","-2.1")]
## dot point
g2=ggplot(mer,aes(`Ten Year`*100,y = `Net Ben`*100,ymin=`Net Ben`+0.1,ymax=`Net Ben`+0.1,
color=`PRS Category`,group=`Age`))+geom_point()+geom_pointrange()+
geom_line(size=1.5)+lims(y=c(0,4),x=c(0,10))+
theme_classic(base_size = 20)+labs(x="MS Predicted Ten Year Risk (%)",y="MS Lifetime Benefit (% ARR)",color="LPA SD")
g2
dfh$ten_year_risk
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa")],by.y = "sample_id",by.x="identifier")
train$cad.prs=train$scaled_lpa
dfascvd
names(dfascvd)
test$as2
dfh$pce_risk = dfh$as2
head(dfh)
dfh$as2
head(dfh$as2)
dim(train)
dim(test)
train=merge(train,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train$pce_risk = train$as2
train$pce_category = cut(dfh$pce_risk,
breaks = c(-Inf, 5, 7.5,Inf),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
train$pce_risk
summary(train$pce_risk)
train$pce_category = cut(dfh$pce_risk,
breaks = c(-Inf, 5, 7.5,Inf),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
train$pce_category = cut(dfh$pce_risk,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
# Categorize PCE risk
train$pce_category = cut(train$pce_risk,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
data=train
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
head(subset)
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
head(data)
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
head(test)
dim(train)
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
head(train)
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","")],by.y = "sample_id",by.x="identifier")
train=merge(train,lpa[,c("sample_id","scaled_lpa","lpanew")],by.y = "sample_id",by.x="identifier")
train$cad.prs=train$scaled_lpa
train=merge(train,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
head(train)
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
train$pce_risk = train$as2
train$lpa_category = cut(train$lp,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
# Categorize PCE risk
train$pce_category = cut(train$pce_risk,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
data=train
head(data)
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
train$pce_risk = train$as2
train$lpa_category = cut(train$lp,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","lpanew")],by.y = "sample_id",by.x="identifier")
train$cad.prs=train$scaled_lpa
train=merge(train,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
ages = c(40:80)
nstates = c(
"Health",
"Ht",
"HyperLip",
"Dm",
"Cad",
"death",
"Ht&HyperLip",
"HyperLip&Dm",
"Ht&Dm",
"Ht&HyperLip&Dm"
)
ages=40:80
modelfit=fitfunc2(data.table(train),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
coefs=b$custom_smooth
prs_quants=c(-2:2)
sex=c(0,1)
atrisk=expand.grid(intercept=1,prs_quants=prs_quants,sex=sex,smoke=c(0,1),ah=c(0,1),stat=c(0,1))
ar=atrisk[atrisk$ah==0&atrisk$smoke==0&atrisk$stat==0,]
agesint=seq(40,70,by=5)
tenlifarray=array(NA,dim=c(length(agesint),nrow(ar),4))
dimnames(tenlifarray)=list(agesint,levels(interaction(prs_quants,sex)),c("Ten","Lifetime","TenBenefit","LifetimeBenefit"))
for(g in 1:length(agesint)){
age=agesint[g]
tenlifarray[g,,1]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,2]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,3]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$Hazard_treated
tenlifarray[g,,4]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$Hazard_treated
}
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
ben2=melt(tenlifarray[,c(6:10),"LifetimeBenefit"])
ten=melt(tenlifarray[,c(6:10),"Ten"])
l=melt(tenlifarray[,c(6:10),"Lifetime"])
mer=merge(ten,l,by=c("Var1","Var2"))
mer=merge(mer,ben,by=c("Var1","Var2"))
# colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
# mer$`PRS Category`=factor(mer$`PRS Category`,labels = c(0.01,seq(0.1,0.9,by=0.1),0.99))
# mermelt=melt(mer,id.vars=c("Age","PRS Category"))
colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
mer$`PRS Category`=factor(mer$`PRS Category`,labels = -2:2)
mermelt=melt(mer,id.vars=c("Age","PRS Category"))
# tenlifarray[,c("2.1","-2.1"),"Ten"]
#
# netben[,c("2.1","-2.1")]
## dot point
g2=ggplot(mer,aes(`Ten Year`*100,y = `Net Ben`*100,ymin=`Net Ben`+0.1,ymax=`Net Ben`+0.1,
color=`PRS Category`,group=`Age`))+geom_point()+geom_pointrange()+
geom_line(size=1.5)+lims(y=c(0,4),x=c(0,10))+
theme_classic(base_size = 20)+labs(x="MS Predicted Ten Year Risk (%)",y="MS Lifetime Benefit (% ARR)",color="LPA SD")
g2
train$pce_risk = train$as2
train$lpa_category = cut(train$lp,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
# Categorize PCE risk
train$pce_category = cut(train$pce_risk,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
data=train
# Modify your existing risk calculation function to include PCE stratification
compute_stratified_risk = function(data, ages, lpa_breaks, pce_categories) {
results = array(NA, dim = c(length(ages), length(lpa_breaks), length(pce_categories), 2))
dimnames(results) = list(ages, lpa_breaks, pce_categories, c("Ten_Year_Risk", "Lifetime_Risk"))
load("~/Dropbox (Personal)//pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/Dropbox (Personal)/rootfilesforbackup/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
train=merge(train,lpa[,c("sample_id","scaled_lpa","lpanew")],by.y = "sample_id",by.x="identifier")
train$cad.prs=train$scaled_lpa
train=merge(train,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
ages = c(40:80)
nstates = c(
"Health",
"Ht",
"HyperLip",
"Dm",
"Cad",
"death",
"Ht&HyperLip",
"HyperLip&Dm",
"Ht&Dm",
"Ht&HyperLip&Dm"
)
train$pce_risk = train$as2
train$lpa_category = cut(train$lp,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
# Categorize PCE risk
train$pce_category = cut(train$pce_risk,
breaks = c(0, 5, 7.5,100),
labels = c("<5%", "5-<7.5%", ">=7.5%"))
data=train
head(data)
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
age-10
head(data)
data$enrollage
head(data$lpa_category)
head(data$pce_category)
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
lpa_cat=lpca_breaks[1]
lpa_cat=lpa_breaks[1]
lpa_breaks = c("<5%", "5-<7.5%", ">=7.5%")
lpa_breaks[1]
pce_categories = c("<5%", "5-<7.5%", ">=7.5%")
pce_cat=pce_categories[1]
lpa_cat=lpa_breaks[1]
subset = data[data$enrollage == age &
data$lpa_category == lpa_cat &
data$pce_category == pce_cat, ]
### this is the data frame with approportiate score
states=readRDS("~/multistate2/output/state_occupancy_risk.rds")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
source("../R/newsim.R")
source("utils/utils.R")
source("utils/model_functions.R")
source("utils/sampling_methods.R")
source("utils/initialization.R")
source("../R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 1000,initial_values = initial_values)
source("~/aladynoulli/R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1,nsamples = 1000,n_iters = 100,initial_values = initial_values)
source("~/aladynoulli/R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 1000,initial_values = initial_values)
source("../R/newsim.R")
source("utils/utils.R")
source("utils/model_functions.R")
source("utils/sampling_methods.R")
source("utils/initialization.R")
source("../R/aladynoulli.R")
source("~/aladynoulli/R/aladynoulli.R")
source("~/aladynoulli/R/aladynoulli.R")
source("../R/newsim.R")
source("utils/utils.R")
source("utils/model_functions.R")
source("utils/sampling_methods.R")
source("utils/initialization.R")
source("../R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 1000,initial_values = initial_values)
a$acceptance_rates
hist(a$samples$Lambda[1,1])
dim(a$samples$Lambda)
hist(a$samples$Lambda[,1,1,1])
plot(a$log_posteriors)
plota(a$log_likelihoods)
plot(a$log_likelihoods)
plot(a$samples$Lambda[,1,1,1])
plot(a$samples$Lambda[,2,1,1])
plot(a$samples$Lambda[,3,1,1])
plot(a$samples$Lambda[,3,3,1])
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 5000,initial_values = initial_values)
source("~/aladynoulli/R/aladynoulli.R")
source("~/aladynoulli/R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
# Here you initialize the MCMC
initial_values <- mcmc_init_two(y = Y, G = G, num_topics = 3, length_scales_lambda = rep(10, 3),
var_scales_lambda = rep(1, 3),
length_scales_phi = rep(10, 3),
var_scales_phi = rep(1, 3))
a=aladynoulli(Y, G, n_topics = 3,nburnin = 1000,nsamples = 1000,n_iters = 5000,initial_values = initial_values)
a$acceptance_rates
plot(a$log_posteriors)
plot(a$log_likelihoods)
source("~/aladynoulli/R/aladynoulli.R")
40-36
ep(0.04)
45-40
exp(.05)
exp(-0.05)
source("~/aladynoulli/R/aladynoulli.R")
