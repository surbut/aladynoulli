setwd("~/aladynoulli/Rscripts")
set.seed(123)
source("simulations/simwithlogit.R")
source("mcmc_with_elliptical.R")
source("mcmc_sampler.R")
source("utils/utils.R")
source("utils/model_functions.R")
source("utils/sampling_methods.R")
source("utils/initialization.R")
# main execution
# Assuming y and g_i are already loaded
n_topics <- 3  # Set this to your desired number of topics
n_diseases <- dim(y)[2]
T <- dim(y)[3]
y
dim(y)
saveRDS(y, file = "~/aladynoulli/data/simdata.rds.gzip", compress = "gzip")
dim(y)
y[1, ]
y[1, ,]
y[4, ,]
y[6, ,]
y[10, ,]
y[20, ,]
G
g_i
dim(F)
dim(G)
dim(g_i)
G <-g_i
dim(y)
T
Ttot <- dim(y)[, 3]
initial_values <- initialize_mcmc(y,
G,
n_topics,
n_diseases,
Ttot,
var_scales_phi = var_scales_phi,
length_scales_lambda = length_scales_lambda,
length_scales_phi = length_scales_phi,
var_scales_lambda = var_scales_lambda,
sigsmall = 0.01)
Ttot <- dim(y)[, 3]
Ttot <- dim(y)[3]
# Here you initialize the MCMC
initial_values <- initialize_mcmc(y,
G,
n_topics,
n_diseases,
Ttot,
var_scales_phi = var_scales_phi,
length_scales_lambda = length_scales_lambda,
length_scales_phi = length_scales_phi,
var_scales_lambda = var_scales_lambda,
sigsmall = 0.01)
initial_values
names(initial_values)
dim(G)
c
dim(Lambda)
Lambda <- lambda_ik
dim(Lambda)
dim(y)
Phi <- phi_kd
dim(Phi)
Eta <- phi_kd
n_individuals <- dim(Lambda)[1]
n_topics <- dim(Lambda)[2]
n_diseases <- dim(Phi)[2]
Ttot <- dim(Lambda)[3]
theta <- apply_softmax_to_lambda(Lambda) # Apply softmax to Lambda
apply_softmax_to_lambda
pi
pi <- array(0, dim = c(n_individuals, n_diseases, Ttot))
for (t in 1:Ttot) {
pi[, , t] <- theta[, , t] %*% logistic(Phi[, , t])
}
Phi
logistic(Phi[, , t])
Eta
Eta[, , 1]
logit(Eta[, , 1])
logistic
logistic(Phi[, , t])
logit
Phi
Phi[, , 1]
pi
dim(pi)
log_lik
log_lik <- 0
i <- 1
d <- 3
y[i, d, ]
i <- 100
y[i, d, ]
y[300, d, ]
y[300, , ]
all(y[300, , ] == 0)
source("../R/newsim.R")
setwd("~/aladynoulli/Rscripts")
setwd("~/aladynoulli")
source("../R/newsim.R")
setwd("~/aladynoulli/Rscripts")
# Load required libraries
set.seed(123)
### make simwithlogit a function to simulate
source("../R/newsim.R")
source("utils/utils.R")
source("utils/model_functions.R")
source("utils/sampling_methods.R")
source("utils/initialization.R")
source("../R/aladynoulli.R")
data <- generate_tensor_data(num_covariates = 5,K = 3,T = 20,D = 5,N = 100)
Y <- data$Y
G <- data$G
plot_individuals(data$S,num_individuals = 3)
initial_values <- mcmc_init_two(y = Y, G = G)
initial_values <- mcmc_init_two(y = Y, G = G, n_topics = 3)
mcmc_init_two()
mcmc_init_two
d=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
head(d)
dim(d)
for(i in 1:dim(d)[1]){
for(d in 1:dim(d)[2]){}
}
event=array(dim(d)[3],dim = dim(d));
event=array(dim(d)[3],dim = dim(d));
dim(d)[3]
dim(d)
dim(d)
d=readRDS("~/Dropbox (Personal)/desktopmess/disease_array_incidence.rds")
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,d,])!=0){
event[i,disease]=(which(y[i,disease,]==1))-1
else{event[i,disease]=T
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,d,])!=0){
event[i,disease]=(which(y[i,disease,]==1)-1)
else{event[i,disease]=T
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,d,])!=0){
event[i,disease]=(which(y[i,disease,]==1)-1)}
else(event[i,disease]=T)
}
}
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,d,])!=0){
event[i,disease]=(which(d[i,disease,]==1)-1)}
else(event[i,disease]=T)
}
}
dim(d)
i
dim(d)[1]
dim(d)[2]
dim(d)[3]
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=(which(d[i,disease,]==1)-1)}
else(event[i,disease]=T)
}
}
disease
i
dim(d)
d[i, disease, ]
which(d[i, disease, ]==1)
ages=30:80
ages[d[i, disease, ]==1]
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1)}
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=T)
}
}
event=array(dim(d)[3],dim = dim(d));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[which(d[i, disease, ]==1)]-1}
else(event[i,disease]=T)
}
}
event[i,disease]
i
disease
dim(event)
event=array(dim(d)[3],dim = c(1000,348));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=T)
}
}
event=array(dim(d)[3],dim = c(1000,348));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=80)
}
}
event=array(dim(d)[3],dim = c(1000,348));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=80)
}
}
disease
dim(event)
i
dim(d)
event=array(dim(d)[3],dim = c(10000,348));
for(i in 1:dim(d)[1]){
for(disease in 1:dim(d)[2]){
if(sum(d[i,disease,])!=0){
event[i,disease]=ages[d[i, disease, ]==1]-1}
else(event[i,disease]=80)
}
}
dim(event)
dim(d)
head(event)
y[1,1,]
d[1,1,]
d[1,1=2,]
d[1,2,]
saveRDS(event,"~/Dropbox (Personal)/pythoneventindices.rds")
